<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>nl.tudelft</groupId>
    <artifactId>coreir</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>cacm/**/*</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <!-- default is to bind to package phase: we override and not create fatjar unless explicitly
                             specified on command line - this speeds up the build greatly -->
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <!-- See https://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html
                              JAR files providing implementations of some interfaces often ship with a META-INF/services/ directory
                              that maps interfaces to their implementation classes for lookup by the service locator. To relocate
                              the class names of these implementation classes, and to merge multiple implementations of the same
                              interface into one service entry, the ServicesResourceTransformer can be used.
                              Lucene needs 'META-INF/services/org.apache.lucene.codecs.Codec' to find the proper codecs.
                              cf. https://stackoverflow.com/questions/38361533/an-spi-class-of-type-org-apache-lucene-codecs-codec-with-name-lucene54-does-no/38382096
                            -->
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                            </transformers>
                            <!-- This fixes the issue "Invalid signature file digest for Manifest main attributes"
                                 cf. http://zhentao-li.blogspot.com/2012/06/maven-shade-plugin-invalid-signature.html -->
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <!-- this will create both a normal thin jar and also a fatjar -->
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>fatjar</shadedClassifierName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>

        <dependency>
            <groupId>io.anserini</groupId>
            <artifactId>anserini</artifactId>
            <version>0.14.1</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>
</project>